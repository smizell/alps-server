#!/usr/bin/env node

var alpsFromXml = require('minim-alps').alpsFromXml;
var alpsToHtml = require('minim-alps').alpsToHtml;
var async = require('async');
var fs = require('fs');
var path = require('path');

// The URL appended to all HREFs in profiles
// This replaces http://alps.io
// TODO: Pull from configuration file
var appendUrl = process.argv[2] || '';

// Directory of ALPs profiles
var profilesDir = path.resolve(__dirname, '..', 'profiles');

// Directories we want to transform
var directories = [
  path.resolve(profilesDir, 'schema.org')
]

// ----------------------------------------------------------------------------

// Now that we have everything, we can process each directory
async.each(directories, processDirectory, outputError);

// ----------------------------------------------------------------------------

function processDirectory(directory, callback) {
  async.waterfall([
    readProfilesDir(directory),
    transformFiles(directory)
  ], callback);
}

function readProfilesDir(directory) {
  return function(callback) {
    fs.readdir(directory, callback);
  }
}

function transformFiles(directory) {
  return function (files, callback) {
    async.each(files, function(filename, eachCallback) {
      var fileHandler = transformFile(directory, filename, eachCallback);
      fs.readFile(path.resolve(directory, filename), 'utf8', fileHandler);
    }, callback);
  }
}

function transformFile(directory, filename, callback) {
  return function(error, originalXml) {
    if (error) {
      return callback(error);
    }

    async.waterfall([
      function(next) {
        transformXml(directory, filename, originalXml, next);
      },
      function(newXml, next) {
        transformRefract(directory, filename, newXml, next);
      },
      function(refract, next) {
        transformHtml(directory, filename, refract, next);
      }
    ], callback)
  }
}

function transformXml(directory, originalFilename, originalXml, callback) {
  var newXml = originalXml.replace(/http:\/\/alps.io/g, appendUrl);
  var newFilename = path.resolve(directory, originalFilename.replace('.xml', '-final.xml'));

  fs.writeFile(newFilename, newXml, function(error) {
    if (error) {
      return callback(error);
    }

    callback(null, newXml);
  });
}

function transformRefract(directory, originalFilename, newXml, callback) {
  var refract = alpsFromXml(newXml);
  var newFilename = path.resolve(directory, originalFilename.replace('.xml', '-refract-final.json'));
  var refractJson = JSON.stringify(refract.toRefract(), null, 2);

  fs.writeFile(newFilename, refractJson, function(error) {
    if (error) {
      return callback(error);
    }

    callback(null, refract);
  });
}

function transformHtml(directory, originalFilename, refract, callback) {
  var html = alpsToHtml(refract);
  var newFilename = path.resolve(directory, originalFilename.replace('.xml', '-final.html'));

  fs.writeFile(newFilename, html, function(error) {
    if (error) {
      return callback(error);
    }

    callback(null, html);
  });
}

function outputError(error) {
  if (error) {
    console.log(error);
  }
}
